package org.bbs.apklauncher.emb.auto_gen;

import java.lang.ref.WeakReference;
import java.util.HashMap;
import java.util.Map;

import org.bbs.osgi.activity.ReflectUtil.ActivityReflectUtil;

import org.bbs.apklauncher.ApkLuncherActivity;
import org.bbs.apklauncher.InstalledAPks;
import org.bbs.apklauncher.PackageManagerProxy;
import org.bbs.apklauncher.emb.Host_Application;
import org.bbs.apklauncher.emb.IntentHelper;
import org.bbs.apklauncher.emb.Util;
import org.bbs.apklauncher.emb.ViewCreater;
import org.bbs.apklauncher.emb.auto_gen.Target_Activity;
import org.bbs.apkparser.ApkManifestParser.PackageInfoX.ActivityInfoX;
import org.bbs.osgi.activity.InstrumentationWrapper;
import org.bbs.osgi.activity.InstrumentationWrapper.CallBack;
import org.bbs.osgi.activity.ReflectUtil;
import org.bbs.osgi.activity.ResourcesMerger;
import org.bbs.osgi.activity.TargetContext;

import android.app.Application;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
//do NOT edit this file, auto-generated by host_target.groovy from Target_Activity.java.template
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;
import dalvik.system.DexClassLoader;

// keep logic outside of this as many as possible.
public class Stub_Activity extends 
StubBase_Activity
implements CallBack {

	/**
	 * type {@link ComponentName}
	 */
	public static final String EXTRA_COMPONENT_CLASS_NAME = Util.ACTIVITY_EXTRA_COMPONENT_CLASS_NAME;
	
	private static final String TAG = Stub_FragmentActivity.class.getSimpleName();
	
	private ClassLoader mTargetClassLoader;
	private TargetContext mTargetContext;
	private ActivityInfoX mTargetActivityInfo;
//do NOT edit this file, auto-generated by host_target.groovy from Target_Activity.java.template
	private ResourcesMerger mResourceMerger;
	
	private PackageManager mRealSysPm;
	private Context 	   mRealBaseContext;	
	
	private IntentHelper mIntent;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		onPrepareActivityStub();
		
		super.onCreate(savedInstanceState);
		
		updateTitle();
	}
	
	@Override
	protected void attachBaseContext(Context newBase) {
		mRealBaseContext = newBase;
		mTargetContext = new TargetContext(newBase);
		super.attachBaseContext(mTargetContext);
		
		mRealSysPm = getPackageManager();
	}

	private void onPrepareActivityStub() {
		
//do NOT edit this file, auto-generated by host_target.groovy from Target_Activity.java.template
		Intent intent = getIntent();
		
		// get target activity info
		String targetActivityClassName = intent.getStringExtra(EXTRA_COMPONENT_CLASS_NAME);
		mTargetActivityInfo = InstalledAPks.getInstance().getActivityInfo(targetActivityClassName);
		String libPath = mTargetActivityInfo.mPackageInfo.mLibPath;
		String targetApplicationClassName = mTargetActivityInfo.applicationInfo.className;
		int targetThemeId = mTargetActivityInfo.theme;
		String mTargetApkPath = mTargetActivityInfo.applicationInfo.publicSourceDir;
		if (TextUtils.isEmpty(targetApplicationClassName)){
			targetApplicationClassName = Application.class.getCanonicalName();
			Log.d(TAG, "no packageName, user default.");
		}
		String targetPackageName = mTargetActivityInfo.packageName;

		Log.d(TAG, "host activity              : " + this);
		Log.d(TAG, "targetApplicationClassName : " + targetApplicationClassName);
		Log.d(TAG, "targetPackageName          : " + targetPackageName);
		Log.d(TAG, "targetActivityClassName    : " + targetActivityClassName);
		Log.d(TAG, "themeId                    : " + targetThemeId);
		Log.d(TAG, "targetApkPath              : " + mTargetApkPath);
		Log.d(TAG, "libPath                    : " + libPath);
		
		// create target classloader if necessary.
		mTargetClassLoader = InstalledAPks.makeClassLoader(mRealBaseContext, mTargetApkPath, libPath);
		mTargetContext.classLoaderReady(mTargetClassLoader);

//do NOT edit this file, auto-generated by host_target.groovy from Target_Activity.java.template
		// do application init. must before activity init.
		Application app = ((Host_Application)getApplication()).onPrepareApplictionStub(mTargetActivityInfo.applicationInfo, 
																						mTargetClassLoader, mRealSysPm);
		
		// do activity init
		InstrumentationWrapper.injectInstrumentation(this, this);
		try {
			mResourceMerger = InstalledAPks.makeTargetResource(mTargetApkPath, this);

			targetThemeId = ReflectUtil.ResourceUtil.selectDefaultTheme(mResourceMerger, targetThemeId, 
																			mTargetActivityInfo.applicationInfo.targetSdkVersion);

			Log.d(TAG, "resolved activity theme: " + targetThemeId);
			mTargetContext.setTheme(targetThemeId);
			mTargetContext.themeReady(targetThemeId);
			mTargetContext.resReady(mResourceMerger);
			mTargetContext.applicationContextReady(InstalledAPks.getApplication(targetPackageName));
			
			ReflectUtil.ActivityReflectUtil.setActivityApplication(this, app);
			Class clazz = mTargetClassLoader.loadClass(targetActivityClassName);
			mTargetActivity = (Target_Activity) clazz.newInstance();
			mTargetActivity.setHostActivity(this);
			ReflectUtil.ActivityReflectUtil.attachBaseContext(mTargetActivity, this);
		} catch (Exception e) {
			throw new RuntimeException("error in create activity: " + targetActivityClassName , e);
		}		
	}
//do NOT edit this file, auto-generated by host_target.groovy from Target_Activity.java.template
	
	@Override
	public Intent getIntent() {
		if (null == mIntent) {
			mIntent = new IntentHelper(super.getIntent());
		}
		return mIntent;
		
//		return super.getIntent();
	}

	private void updateTitle() {
		CharSequence title = "";
		if (mTargetActivityInfo.labelRes  > 0) {
			title = mResourceMerger.getString(mTargetActivityInfo.labelRes);
		}
		if (TextUtils.isEmpty(title)) {
			title = mTargetActivityInfo.nonLocalizedLabel;
		}
		if (!TextUtils.isEmpty(title)) {
			setTitle(title);
		}
	}

	// XXX are we need this really???
	// Activity extends ContextThemeWrapper which had these 2 methods,
	// so we override those with ours.
//do NOT edit this file, auto-generated by host_target.groovy from Target_Activity.java.template
	@Override
	public Theme getTheme() {
		return mTargetContext.getTheme();
	}
	@Override
	public Resources getResources() {
		return mTargetContext.getResources();
	}

	@Override
	public void processIntent(android.content.Intent intent) {
		 Util.onProcessStartActivityIntent(intent, mTargetClassLoader, mRealBaseContext);
	}
	
	@Override
	public View onCreateView(String name, Context context, AttributeSet attrs) {
		View view = super.onCreateView(name, context, attrs);
		return view != null ? view 
							: ViewCreater.onCreateView(name, context, attrs, mTargetClassLoader, mTargetActivity);
	}
}
